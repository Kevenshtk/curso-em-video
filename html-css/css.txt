@charset "UTF-8"; para ter compatibilidade com caracteres especiais

UNIÃO DE ESTILOS
div, p diz q vai ser estilizado as tags div e p
div p diz q vai ser estilizado a tag p dentro da div

*{  } para fazer configurações globais

ALINHAMENTO
text-align (center, left, right, justify); para alinha o texto
text-indent: px; da um espaço na primeira linha do p
vertical-align(top, middles, bottom) para alinha o texto em tabelas

BACKGROUND
background-image: linear-gradient(to left(direção), cor, cor); para fazer degrade
background-image: url(caminho para img); colocar imagem de fundo
background-size: 1350px, 300px(largura) 150px(altura) (cover(preenche toda a tela), contain(monstra 100% da imagem)); alterar o tamanho
background-repeat: (no-repeat, repeat-x(horizontal), repeat-y(vertical));
background-position:(left, right, top, bottom, center);
background-attachment: fixed; faz o fundo ficar fixo 

Shorthand
background(color,image, repeat, position, attachment(ordem)) black url(img/wallpaper002.jpg) no-repeat center fixed;


MEDIDAS
valores relativos define o valor com base em um outro elemento
100%, 50%

ex.:
width: calc(100vw - 60(lado E + lado D)); fazer o css fazer cálculos com valores relativos
margin: 30px;

width: calc((100%/3(cada img vai ocupar 1/3 do espaço)) - 3px(margem));
margin: 0 1.5px;

1em é uma vez o font-size do elemento
ex.:
html { font-size: 14px; }
.container { font-size: 2em = 28px }

vw é 1/100 da largura da tela.
vh é 1/100 da altura da tela.

height 98vh: ;altura
width: vw;largura
max-width: ;lartura máxima
min-height: ; altura miníma
min-w, h e max w, h sempre vão se basear no tamanho definido no width ou height;

ex.:
width: 100%;
min-width: 600px;
max-width: 1024px;

OVERFLOW
overflow (scroll(exibe uma barra de rolagem), auto(só exibe uma barra de rolagem quando o tamanho é ultrapassado))cria uma barra de rolagem no elemento não deixando ele ultrapassar o tamanho
overflow-x(horizontal) e -y(vertical) controla apenas uma barra de rolagem
overflow: auto(-x) scroll(-y)

DISPLAY
diplay: inline, block é capaz de transformar elementos inline em block e vice-versa
none oculta o elemento

VISIBILITY
visible padrão
hidden oculta o elemento mas não remove o espaço do elemento da tela

OPACITY
opacity: 0% a 100%;

BOX-SIZING
altera a forma como o tamanho é calculado
border-box faz o valor de padding e border ser incluídos no valor do width/height
ex.:
div{
height: 200px
padding: 10px 0
box-sizing: border-box
}
altura total= 180px + 10px + 10px = 200px

FONT
font-size: 1em; define o tamanho da fonte
font-weight(lighter, normal, bold, bolder) é o peso da fonte
font-style(italic)
text-decoration(underline, none) texto sublinhado/ não sublinhado
text-transform: uppercase; deixa todas as letras maíusculas
font-variant: small-caps; deixa todas as letras maíusculas e as primeiras letras maiores
line-height: em; é o espaço entre linha

Shorthand
font(font-style-> font-weight-> font-size-> font-family(ordem))


 @font-face (para colocar fontes baixadas) { usar fontes baixadas
            font-family: nome da fonte;
            src: url('nome e formato da fonte') format('opentype(otf) truetype(ttf)');
        }

PSEUDO-CLASSES
Pseudo-classes de estado: estiliza os mais variados estados dos elementos.

:hover: quando passa o mouse em cima.
:visited: quando o link já foi acessado.

Pseudo-classes de estrutura: estiliza elementos com base em suas posição.

OF-TYPE
:first-of-type: estiliza o primeiro elemento especificado no seletor detro do elemento pai.

:last-of-type: estiliza o último elemento especificado no seletor detro do elemento pai.

:nth-of-type(2(posição)ou odd(aplica o estilo a elementos impares), even(aplica o estilo a elementos pares))
: estiliza o elemento na posição indicada especificado no seletor detro do elemento pai

CHILD
:first-child: estiliza o primeiro elemento filho detro do elemento pai.
ex.: p:first-child vai estilizar todos os elemento p que são os primeiros detro do elemento pai.

:last-child: estiliza o último elemento filho detro do elemento pai.

:nth-child(2(posição)ou odd(aplica o estilo a elementos impares), even(aplica o estilo a elementos pares))
: estiliza o elemento na posição indicada especificado no seletor detro do elemento pai.
exe.: p:nth-of-type(2) vai estilizar todos os p que são os segundos detro do elemento pai.

PSEUDO-ELEMENTOS
modifica partes de um elemento

::first-letter: estiliza a primeira letra(Se o seletor aparecer várias vezes o estilo será aplicado à todas as primeiras letras) 

::first-line: estiliza a primeira linha

::after: depois do elemento

::before: antes do elemento

ex.:
a.externo::after{
    content(obrigatório): '\00A0\1F517'; informa o texto que será exibido antes do elemento
}


classes
active: quando click ocorre a ação 
focus-within: quando o elemento fica em foco

BORDA
Shorthand
border(width, style, color): 1px(tamanho) solid(tipo(dashed, groove, ridge, inset, outset)) white(cor);

border-radius: 20px 0px(borda direita C/esquerda B); para aredondar a borda
border-collapse: collapse; junta as bordas de uma tabela
border-spacing: 15px; Defina o espaçamento das bordas de uma tabela

PADDING
padding(top, right,bottom, left): é o espaço entre o conteúdo e a margem
1 valor: configura todos no msm valor
2 valores: configura o primeiro valor cima/baixo e o segundo valor direita/esquerda 

MARGEM
margin(top, right, bottom, left): auto deixa a caixa no centro da tela

outline(width, style, color): é o espaço entre a borda e a margem

SOMBRAS
box-shadow : 
1px(delocamento H(valor positivo move para direita)) 
1px(delocamento V(valor positivo move para baixo)) 
1px(desfoque) 
1px(expandir) a sombra aumenta em todas as direções
black(cor)
inset cria sombra na frente do elemento

text-shadow: 2px 2px 0px rgba(0, 0, 0, 0.26); sombra em textos

VÁRIAVEIS EM CSS
:root serve para criar váriaveis{
 --nome na var: valor;
}

transition-duration: 0.5s; pra quando o mouse passar em cima

transform: rotate(-45deg); pra rotacionar algo

list-style-type: '\2714(nome I)\00A0(espaço)'; colocar icones na colunas

list-style-position: inside(o ícone faz parte do texto), outside; posição dos icones da colunas

columns: 2; números de colunas

text-transform: uppercase; deixa todas as letras em maiusculo

centralizar vídeo
div.video{
    background-color: var(--cor5);
    margin: 0px -20px 30px -20px;
    padding: 20px;
    padding-bottom: 57%;
    position: relative;(mudar a posição do elemento)
}
div.video > iframe{
    position: absolute;
    top: 5%;
    left: 5%;
    width: 90%;
    height: 90%;
}


POSITION
position: munda a posição de um elemento

relative é como um mapa para o absolute usado no elemento pai

absolute remove o elemento do fluxo normal do HTML, tem as bordas da página com referência
ex.:
HTML
<div class="container">
  <img>
</div>

CSS
.container {
    position: relative;
    margin-top: 30px;
    border: 2px solid;
    background: #ecececbf;
    width: 320px;
    height: 400px;
    padding: 10px;
}

img {
    width: 100px;
    position: absolute;
    top: -25px;
    right: -25px;
}

fixed deixa o elemento fixo na tela

sticky muda a posição dependendo rolagem
O.B.S.: O elemento tem q está com o position relative ou absolute

MOVENDO ELEMENTOS
top valor; não é usada junto com bottom
right ; não é usada junto com left
bottom
left

transform: aplica uma transformação 2D ou 3D a um elemento
translate(largula(x), altura(y)); munda a posição de um elemento 2D

form > input[type=submit]{ para aplicar estilo em inputs

FLEXBOX
para utilizar esse recurso é necessário ter no HTML ao menos um elemento (container) contendo outros (itens).

flex-direction:
row / row-reverse os itens são organizados em forma de linha

column / column-reverse os itens são organizados em forma de coluna

flex-wrap:
faz com que ocorra a “quebra de linha” nos itens.

nowrap: Todos os itens serão dispostos em uma linha;

wrap: Ocorrerá a quebra de linha e os itens mais à direita serão deslocados para a linha de baixo;

wrap-reverse: os itens mais à direita serão deslocados para a linha de cima.

gap: 38px; serve para criar espaços entre os itnes de um container quando houver quebra de linha.
 
flex-flow:
é uma forma abreviada para a escrita das propriedades flex-direction e flex-wrap(nesta ordem).

justify-content:
define o alinhamento dos itens ao longo do eixo principal do container.

flex-start(padrão)

flex-end: Os itens são alinhados a partir do fim do eixo principal;

center

space-between: Distribui os elementos no container;

space-around: Distribui os elementos no container adicionando uma margen;

space-evenly: distribui os elementos com um espaçamento igual no container.

align-content:
Essa propriedade define como as linhas são distribuídas ao longo do eixo transversal do container.

stretch: Ocupando toda a altura disponível;

flex-start: As linhas são distribuídas a partir do início do eixo transversal;

flex-end: As linhas são distribuídas a partir do fim do eixo transversal;

center

space-between: A primeira linha é deslocada para o início do eixo transversal, 
a última é deslocada para o final do eixo transversal e as demais são distribuídas 
uniformemente entre eles;

space-around: As linhas são uniformemente distribuídas ao longo do eixo transversal. 
Aqui, porém, são atribuídas margens iguais à esquerda e à direita (ou acima e abaixo, dependendo da direção do eixo transversal). 
Por isso a primeira e a última linha não ficam “coladas” nas bordas do container.

align-items:
Essa propriedade define como os itens são distribuídos ao longo do eixo transversal do container.
Só terá efeito se o container tiver uma altura definida.

stretch (padrão): Os itens serão esticados para preencher toda a dimensão do eixo transversal (altura ou largura);

flex-start: Os itens são deslocadas para o início do eixo transversal;

flex-end: Os itens são deslocadas para o final do eixo transversal;

center

baseline: Os itens são alinhados a partir da base da primeira linha de texto de cada um.

Order: [número] O valor numérico atribuído a essa propriedade define a ordem do item. 
Por exemplo, o valor 2 faz com que o item seja o segundo item ao longo do eixo principal, 
enquanto o valor -1 faz com que ele apareça antes do primeiro.

flex-grow: [número] Define a proporção com que um item deve crescer caso seja necessário. O container pai precisa do display: flex;
já o filho não (deve ser aplicado apenas no filho.)

flex-shrink: [0, 1(Padrão), 2, 3] Define a proporção com que um item deve encolher caso seja necessário.

flex-basis: 200px, %, auto Define a largura (ou altura(o container precisa estar em coluna)) inicial do elemento.

flex:(flex-grow, flex-shrink e flex-basis) forma abreviada.

align-self:
permite sobrescrever no item o comportamento que foi definido pela propriedade align-items.

stretch: O item será esticado para preencher toda a dimensão do eixo transversal (altura ou largura);

flex-start: O item é deslocado para o início do eixo transversal;

flex-end: O item é deslocado para o final do eixo transversal;

center:

baseline: O item é alinhado a partir da base da primeira linha de texto dos demais.

@MEDIA

Media Type
Braille: Se refere aos dispositivos táteis.

Print: Se refere aos dispositivos de impressão.

Screen: Se refere a monitores ou dispositivos com telas coloridas e resolução adequada.

Speech: Se refere a sintetizadores de voz ou leitores de tela.

TV: Se refere a televisores ou dispositivos com baixa resolução, quantidade de cores e scroll limitado.

Operadores

not: É utilizado quando se deseja que o resultado de uma determinada expressão seja o oposto ao real. 

only: É utilizado quando se deseja prevenir que navegadores antigos que não suportam Media Features tentem processar a expressão.

and: É responsável pelas expressões múltiplas, isto é, quando usamos mais de uma Media Feature para compor a expressão.

Ex.: @media only screen(media type) and (min-width: 320px(media feature)) and (max-width: 480px) {
  header {
      width: 100%;
  }
}

Orientation
portrait para vertical / retrato
landscape para horizontal / paisagem